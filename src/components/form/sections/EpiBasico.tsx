import { Label } from '@/components/ui/label';
import type { Tables } from '@/lib/supabase/database.types';
import type { FormData } from '../FormContainer';

type Formulario = Tables<'formularios'>;

interface EpiBasicoProps {
  data: FormData;
  onChange: (updates: Partial<FormData>) => void;
  errors: string[];
  formulario: Formulario;
}

interface EpiItem {
  key: keyof FormData;
  label: string;
  description: string;
  icon: string;
  allowNA?: boolean; // Permite "N√£o Aplic√°vel"
}

const epiBasicoItems: EpiItem[] = [
  {
    key: 'epi_capacete',
    label: 'Capacete de Prote√ß√£o',
    description: 'Verificar integridade, ajuste e certifica√ß√£o CA',
    icon: '‚õëÔ∏è',
    allowNA: true
  },
  {
    key: 'epi_oculos',
    label: '√ìculos de Prote√ß√£o',
    description: 'Lentes sem riscos, arma√ß√£o √≠ntegra e certifica√ß√£o CA',
    icon: 'ü•Ω',
    allowNA: true
  },
  {
    key: 'epi_protetor_auricular',
    label: 'Protetor Auricular',
    description: 'Tipo plug ou concha, em bom estado e certifica√ß√£o CA',
    icon: 'üéß',
    allowNA: true
  },
  {
    key: 'epi_vestimenta',
    label: 'M√°scara/Vestimenta de Prote√ß√£o',
    description: 'Contra poeiras/vapores, filtros v√°lidos e certifica√ß√£o CA',
    icon: 'üò∑',
    allowNA: true
  },
  {
    key: 'epi_luvas',
    label: 'Luvas de Prote√ß√£o',
    description: 'Adequadas ao trabalho, sem furos e certifica√ß√£o CA',
    icon: 'üß§',
    allowNA: true
  },
  {
    key: 'epi_calcado',
    label: 'Cal√ßado de Prote√ß√£o',
    description: 'Biqueira de a√ßo, solado antiderrapante e certifica√ß√£o CA',
    icon: 'üë¢',
    allowNA: true
  },
  {
    key: 'ferramental',
    label: 'Ferramental',
    description: 'Em boas condi√ß√µes e em acordo com as NRs aplic√°veis',
    icon: 'üîß',
    allowNA: true
  },
  {
    key: 'corda_icamento',
    label: 'Corda de I√ßamento',
    description: 'Corda suporta carga de trabalho e possui certificado',
    icon: 'ü™¢',
    allowNA: true
  }
];

export function EpiBasico({ data, onChange, errors }: EpiBasicoProps) {

  const handleEpiChange = (key: keyof FormData, value: boolean | 'na') => {
    // Convertemos 'na' para null para representar "N√£o Aplic√°vel"
    const finalValue = value === 'na' ? null : value;
    onChange({ [key]: finalValue });
  };

  const handleObservacoesChange = (value: string) => {
    onChange({ observacoes_epi_basico: value });
  };

  const getCompletionStatus = () => {
    const totalItems = epiBasicoItems.length;
    // Um item est√° completo quando foi "tocado" pelo usu√°rio
    // Consideramos que o estado inicial (undefined) significa n√£o respondido
    // E null significa "N√£o Aplic√°vel" (resposta v√°lida)
    const completedItems = epiBasicoItems.filter(item => {
      const value = data[item.key];
      return value === true || value === false || value === null;
    }).length;

    return { completed: completedItems, total: totalItems };
  };

  const { completed, total } = getCompletionStatus();
  const isComplete = completed === total;

  return (
    <div className="space-y-6">
      {/* Erros gerais da se√ß√£o */}
      {errors.length > 0 && (
        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
          <h4 className="font-medium text-red-800 mb-2">‚ö†Ô∏è Corrija os seguintes erros:</h4>
          <ul className="list-disc list-inside text-sm text-red-700 space-y-1">
            {errors.map((error, index) => (
              <li key={index}>{error}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Instru√ß√µes */}
      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <h4 className="font-medium text-yellow-900 mb-2">üìù Instru√ß√µes de Verifica√ß√£o</h4>
        <ul className="text-sm text-yellow-800 space-y-1">
          <li>‚Ä¢ Verifique cada item de EPI individualmente</li>
          <li>‚Ä¢ Marque "Sim" apenas se o equipamento estiver em perfeitas condi√ß√µes</li>
          <li>‚Ä¢ Verifique sempre o Certificado de Aprova√ß√£o (CA) v√°lido</li>
          <li>‚Ä¢ Use "N√£o Aplic√°vel" apenas quando o EPI/equipamento n√£o for necess√°rio para a atividade</li>
          <li>‚Ä¢ Em caso de d√∫vida, marque "N√£o" e anote nas observa√ß√µes</li>
          <li>‚Ä¢ Todos os itens devem ser respondidos antes de prosseguir</li>
        </ul>
      </div>

      {/* Lista de EPIs */}
      <div className="space-y-4">
        {epiBasicoItems.map((item) => {
          const currentValue = data[item.key] as boolean | null | undefined;

          return (
            <div key={item.key} className="border rounded-lg p-4">
              <div className="flex items-start gap-4">
                <div className="text-2xl">{item.icon}</div>

                <div className="flex-1">
                  <h5 className="font-medium text-gray-900 mb-1">
                    {item.label}
                  </h5>
                  <p className="text-sm text-gray-600 mb-3">
                    {item.description}
                  </p>

                  <div className="flex flex-wrap gap-3">
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        name={item.key}
                        value="true"
                        checked={currentValue === true}
                        onChange={() => handleEpiChange(item.key, true)}
                        className="w-4 h-4 text-green-600 focus:ring-green-500"
                      />
                      <span className="text-sm font-medium text-green-700">
                        ‚úÖ Sim - Aprovado
                      </span>
                    </label>

                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        name={item.key}
                        value="false"
                        checked={currentValue === false}
                        onChange={() => handleEpiChange(item.key, false)}
                        className="w-4 h-4 text-red-600 focus:ring-red-500"
                      />
                      <span className="text-sm font-medium text-red-700">
                        ‚ùå N√£o - Reprovado
                      </span>
                    </label>

                    {item.allowNA && (
                      <label className="flex items-center gap-2 cursor-pointer">
                        <input
                          type="radio"
                          name={item.key}
                          value="na"
                          checked={currentValue === null}
                          onChange={() => handleEpiChange(item.key, 'na')}
                          className="w-4 h-4 text-gray-600 focus:ring-gray-500"
                        />
                        <span className="text-sm font-medium text-gray-700">
                          ‚ûñ N√£o Aplic√°vel
                        </span>
                      </label>
                    )}
                  </div>
                </div>

                {/* Status visual */}
                <div className="flex items-center">
                  {currentValue === true && (
                    <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                      <span className="text-green-600 text-sm">‚úì</span>
                    </div>
                  )}
                  {currentValue === false && (
                    <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                      <span className="text-red-600 text-sm">‚úó</span>
                    </div>
                  )}
                  {currentValue === null && (
                    <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                      <span className="text-gray-600 text-sm">N/A</span>
                    </div>
                  )}
                  {currentValue === undefined && (
                    <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                      <span className="text-gray-400 text-sm">?</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Observa√ß√µes */}
      <div className="space-y-2">
        <Label htmlFor="observacoes_epi_basico" className="text-sm font-medium">
          Observa√ß√µes sobre EPI B√°sico e Equipamentos (opcional)
        </Label>
        <textarea
          id="observacoes_epi_basico"
          placeholder="Anote aqui qualquer observa√ß√£o sobre os equipamentos verificados, problemas encontrados ou recomenda√ß√µes..."
          value={data.observacoes_epi_basico}
          onChange={(e) => handleObservacoesChange(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical min-h-[100px]"
          maxLength={500}
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>Use este campo para detalhar problemas ou fazer recomenda√ß√µes</span>
          <span>{data.observacoes_epi_basico.length}/500</span>
        </div>
      </div>

      {/* Resumo da verifica√ß√£o */}
      {isComplete && (
        <div className={`p-4 border rounded-lg ${
          epiBasicoItems.every(item => data[item.key] === true || data[item.key] === null)
            ? 'bg-green-50 border-green-200'
            : 'bg-orange-50 border-orange-200'
        }`}>
          <h4 className={`font-medium mb-2 ${
            epiBasicoItems.every(item => data[item.key] === true || data[item.key] === null)
              ? 'text-green-900'
              : 'text-orange-900'
          }`}>
            {epiBasicoItems.every(item => data[item.key] === true || data[item.key] === null)
              ? '‚úÖ Verifica√ß√£o Completa'
              : '‚ö†Ô∏è Aten√ß√£o: Itens Reprovados'
            }
          </h4>

          <div className={`text-sm space-y-1 ${
            epiBasicoItems.every(item => data[item.key] === true || data[item.key] === null)
              ? 'text-green-800'
              : 'text-orange-800'
          }`}>
            <p><strong>Aprovados:</strong> {epiBasicoItems.filter(item => data[item.key] === true).length}</p>
            <p><strong>Reprovados:</strong> {epiBasicoItems.filter(item => data[item.key] === false).length}</p>
            <p><strong>N√£o Aplic√°veis:</strong> {epiBasicoItems.filter(item => data[item.key] === null).length}</p>

            {epiBasicoItems.filter(item => data[item.key] === false).length > 0 && (
              <div className="mt-2">
                <p><strong>Itens reprovados:</strong></p>
                <ul className="list-disc list-inside ml-2">
                  {epiBasicoItems
                    .filter(item => data[item.key] === false)
                    .map(item => (
                      <li key={item.key}>{item.label}</li>
                    ))
                  }
                </ul>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Alertas de seguran√ßa */}
      {epiBasicoItems.some(item => data[item.key] === false) && (
        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
          <h4 className="font-medium text-red-900 mb-2">üö® Alerta de Seguran√ßa</h4>
          <p className="text-sm text-red-800">
            Equipamentos reprovados foram identificados. √â <strong>obrigat√≥rio</strong> substituir
            ou reparar os EPIs/equipamentos antes de iniciar qualquer atividade de campo.
            A seguran√ßa do trabalhador √© prioridade absoluta.
          </p>
        </div>
      )}
    </div>
  );
}
